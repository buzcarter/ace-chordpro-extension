define('ace/ext/language_tools', ['require', 'exports', 'module', 'ace/snippets', 'ace/autocomplete', 'ace/config', 'ace/autocomplete/text_completer', 'ace/editor'], (e, t, n) => {
  const r = e('../snippets').snippetManager;
  const i = e('../autocomplete').Autocomplete;
  const s = e('../config');
  const o = e('../autocomplete/text_completer');
  const u = {
    getCompletions(e, t, n, r, i) {
      const s = e.session.getState(n.row);
      const o = t.$mode.getCompletions(s, t, n, r);
      i(null, o);
    },
  };
  const a = {
    getCompletions(e, t, n, i, s) {
      const o = r.snippetMap;
      const u = [];
      r.getActiveScopes(e).forEach((e) => {
        const t = o[e] || [];
        for (let n = t.length; n--;) {
          const r = t[n];
          const i = r.name || r.tabTrigger;
          if (!i) continue;
          u.push({
            caption: i,
            snippet: r.content,
            meta: r.tabTrigger && !r.name ? `${r.tabTrigger}\u21e5 ` : 'snippet',
          });
        }
      }, this), s(null, u);
    },
  };
  const f = [a, o, u];
  t.addCompleter = function (e) {
    f.push(e);
  };
  const l = {
    name: 'expandSnippet',
    exec(e) {
      const t = r.expandWithTab(e);
      t || e.execCommand('indent');
    },
    bindKey: 'tab',
  };
  const c = function (e, t) {
    h(t.session.$mode);
  };
  var h = function (e) {
    const t = e.$id;
    r.files || (r.files = {}), p(t), e.modes && e.modes.forEach(h);
  };
  var p = function (e) {
    if (!e || r.files[e]) return;
    const t = e.replace('mode', 'snippets');
    r.files[e] = {}, s.loadModule(t, (t) => {
      t && (r.files[e] = t, t.snippets = r.parseSnippetFile(t.snippetText), r.register(t.snippets, t.scope), t.includeScopes && (r.snippetMap[t.scope].includeScopes = t.includeScopes, t.includeScopes.forEach((e) => {
        p(`ace/mode/${e}`);
      })));
    });
  };
  const d = e('../editor').Editor;
  e('../config').defineOptions(d.prototype, 'editor', {
    enableBasicAutocompletion: {
      set(e) {
        e ? (this.completers = f, this.commands.addCommand(i.startCommand)) : this.commands.removeCommand(i.startCommand);
      },
      value: !1,
    },
    enableSnippets: {
      set(e) {
        e ? (this.commands.addCommand(l), this.on('changeMode', c), c(null, this)) : (this.commands.removeCommand(l), this.off('changeMode', c));
      },
      value: !1,
    },
  });
})
